# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colab.
"""

import tensorflow.compat.v1 as tf
import numpy as np
import urllib
tf.compat.v1.disable_eager_execution()

numTrainingIters = 10000

# hidden neurons
hiddenUnits = 1000

numClasses = 3

batchSize = 100

# this function takes a data dict w/(dataPointID, (classNumber, matrix)) entries.  
# Each matrix is a sequence of vectors w/ a one-hot-encoding of
# an ascii character, corresponding to one line of text.  
# classNumber: the file number
# test: a dict formatted the same way for testing
# maxSeqLen: the maximum length of a line of text
# seen so far.  
# fileName: the name of a file to add to data.  
# classNumL: an indicator of the class for the file
# linesToUse: how many lines to sample from the file.
#
# returns the new maxSeqLen and new data dictionary with the additional lines of text added
#
# testLinesL: the number of lines needed for testing. 
def addToData (maxSeqLen, data, test, fileName, classNum, linesToUse, testLines):
    response = urllib.request.urlopen(fileName)
    content = response.readlines ()

    # these lines are all unique
    myInts = np.random.choice(len(content), linesToUse + testLines, False)
  
    # i/k is the key of the next line of text to add to the dictionary
    i = len(data)
    k = len(test)

    counter = 0
    
    # loop thru and add the lines of text to the dictionary
    for whichLine in myInts.flat:
        
        # get the line and ignore it if it has nothing in it
        line = content[whichLine].decode("utf-8")
        if line.isspace () or len(line) == 0:
            continue;
        #
        # take note if this is the longest line we've seen
        if len (line) > maxSeqLen:
            maxSeqLen = len (line)
        #
        # create the matrix that will hold this line
        temp = np.zeros((len(line), 256))
        #
        # j is the character we are on
        j = 0
        #
        # loop thru the characters
        for ch in line:
            #
            # non-ascii? ignore
            if ord(ch) >= 256:
                continue
            #
            # one hot!
            temp[j][ord(ch)] = 1
            #
            # move onto the next character
            j = j + 1
            #
        # remember the line of text
        if counter < testLines: #first testLines lines read are stored as testing data
            test[k] = (classNum, temp)
            k = k + 1
            #this is a cat: ^.w.^
        else:
            data[i] = (classNum, temp)
            i = i + 1
        #
        # move onto the next line
        counter += 1
    #
    # and return the dictionary with the new data
    return (maxSeqLen, data, test)

# this function takes as input a data set encoded as a dictionary
# (same encoding as the last function) and pre-pends every line of
# text with empty characters so that each line of text is exactly
# maxSeqLen characters in size
def pad (maxSeqLen, data):
   #
   # loop thru every line of text
   for i in data:
        #
        # access the matrix and the label
        temp = data[i][1]
        label = data[i][0]
        #
        # get the number of chatacters in this line
        len = temp.shape[0]
        #
        # and then pad so the line is the correct length
        padding = np.zeros ((maxSeqLen - len,256))
        data[i] = (label, np.transpose (np.concatenate ((padding, temp), axis = 0)))
   #
   # return the new data set
   return data

# this generates a new batch of training data of size batchSize from the
# list of lines of text data. This version of generateData is useful for
# an RNN because the data set x is a NumPy array with dimensions
# [batchSize, 256, maxSeqLen]; it can be unstacked into a series of
# matrices containing one-hot character encodings for each data point
# using tf.unstack(inputX, axis=2)
def generateDataRNN (maxSeqLen, data):
    #
    # randomly sample batchSize lines of text
    myInts = np.random.randint (0, len(data), batchSize)
    #
    # stack all of the text into a matrix of one-hot characters
    x = np.stack ([data[i][1] for i in myInts.flat])
    #
    # and stack all of the labels into a vector of labels
    y = np.stack ([np.array((data[i][0])) for i in myInts.flat])
    #
    # return the pair
    return (x, y)

# create the data dictionary
maxSeqLen = 0
data = {}
#test dict
test = {}

# load up the three data sets, TODO: replace input files
(maxSeqLen, data, test) = addToData (maxSeqLen, data, test, "https://s3.amazonaws.com/.../data1.txt", 0, 10000, 1000)
(maxSeqLen, data, test) = addToData (maxSeqLen, data, test, "https://s3.amazonaws.com/.../data2.txt", 1, 10000, 1000)
(maxSeqLen, data, test) = addToData (maxSeqLen, data, test, "https://s3.amazonaws.com/.../data3.txt", 2, 10000, 1000)

# pad each entry in the dictionary with empty characters as needed so
# that the sequences are all of the same length
data = pad (maxSeqLen, data)
test = pad (maxSeqLen, test)

# now we build the TensorFlow computation... there are two inputs,
# a batch of text lines and a batch of labels
inputX = tf.placeholder(tf.float32, [batchSize, 256, maxSeqLen])
inputY = tf.placeholder(tf.int32, [batchSize])

# this is the inital state of the RNN, before processing any data
initialState = tf.placeholder(tf.float32, [batchSize, hiddenUnits])

# the weight matrix that maps the inputs and hidden state to a set of values
Wfir = tf.Variable(np.random.normal(0, 0.01, (hiddenUnits + 256, hiddenUnits)), dtype=tf.float32)
Wsec = tf.Variable(np.random.normal(0, 0.01, (hiddenUnits, hiddenUnits)), dtype=tf.float32)

# weights and bias for the final classification
W2 = tf.Variable(np.random.normal (0, 0.05, (hiddenUnits, numClasses)),dtype=tf.float32)
b2 = tf.Variable(np.zeros((1,numClasses)), dtype=tf.float32)

# unpack the input sequences so that we have a series of matrices,
# each of which has a one-hot encoding of the current character from
# every input sequence
sequenceOfLetters = tf.unstack(inputX, axis=2)

# now we implement the forward pass
currentState = initialState
for timeTick in sequenceOfLetters:
    #
    # concatenate the state with the input, then compute the next state
    inputPlusState = tf.concat([timeTick, currentState], 1)
    next_state = tf.tanh(tf.matmul(inputPlusState, Wfir))
    last_state = tf.tanh(tf.matmul(next_state, Wsec))
    currentState = last_state

# compute the set of outputs
outputs = tf.matmul(currentState, W2) + b2

predictions = tf.nn.softmax(outputs)

# compute the loss
losses = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=outputs, labels=inputY)
totalLoss = tf.reduce_mean(losses)

# use gradient descent to train
trainingAlg = tf.compat.v1.train.AdagradOptimizer(0.01).minimize(totalLoss)

# and train!!
with tf.Session() as sess:
    #
    # initialize everything
    sess.run(tf.compat.v1.global_variables_initializer())
    #
    # and run the training iters
    for epoch in range(numTrainingIters):
        #
        # get some data
        x, y = generateDataRNN (maxSeqLen, data)
        #
        # do the training epoch
        _currentState = np.zeros((batchSize, hiddenUnits))
        _totalLoss, _trainingAlg, _currentState, _predictions, _outputs = sess.run(
                [totalLoss, trainingAlg, currentState, predictions, outputs],
                feed_dict={
                    inputX:x,
                    inputY:y,
                    initialState:_currentState
                })
        #
        # just FYI, compute the number of correct predictions
        numCorrect = 0
        for i in range (len(y)):
           maxPos = -1
           maxVal = 0.0
           for j in range (numClasses):
               if maxVal < _predictions[i][j]:
                   maxVal = _predictions[i][j]
                   maxPos = j
           if maxPos == y[i]:
               numCorrect = numCorrect + 1

        #
        # print out to the screen
        print("Step", epoch, "Loss", _totalLoss, "Correct", numCorrect, "out of", batchSize)
    saver = tf.train.Saver()
    saver.save(sess, "task1.tf")
# testing
with tf.Session() as sess:
    #restore the saved session
    saver = tf.train.Saver()
    saver.restore(sess, "task1.tf")
    # random order of the points to test
    testOrder = np.arange(3000)
    np.random.shuffle(testOrder)
    # initialize the start of taking batches
    num = 0
    numCorrect = 0
    while num < 3000:
        selected = testOrder[i:i+batchSize]
        x = np.stack ([test[i][1] for i in selected.flat])
        #
        # and stack all of the labels into a vector of labels
        y = np.stack ([np.array((test[i][0])) for i in selected.flat])
        _totalLoss, _predictions = sess.run([totalLoss, predictions], feed_dict={
            inputX:x,
            inputY:y,
            initialState:_currentState
        })
        num += batchSize
        for i in range (len(y)):
           maxPos = -1
           maxVal = 0.0
           for j in range (numClasses):
               if maxVal < _predictions[i][j]:
                   maxVal = _predictions[i][j]
                   maxPos = j
           if maxPos == y[i]:
               numCorrect = numCorrect + 1

    print("Loss for 3000 randomly chosen documents is ", _totalLoss, "number correct labels is ", numCorrect, "out of 3000")